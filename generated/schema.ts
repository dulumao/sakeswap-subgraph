// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SakeMaster extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SakeMaster entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SakeMaster entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SakeMaster", id.toString(), this);
  }

  static load(id: string): SakeMaster | null {
    return store.get("SakeMaster", id) as SakeMaster | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAllocPoint(): BigInt {
    let value = this.get("totalAllocPoint");
    return value.toBigInt();
  }

  set totalAllocPoint(value: BigInt) {
    this.set("totalAllocPoint", Value.fromBigInt(value));
  }
}

export class SakeMasterPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SakeMasterPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SakeMasterPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SakeMasterPool", id.toString(), this);
  }

  static load(id: string): SakeMasterPool | null {
    return store.get("SakeMasterPool", id) as SakeMasterPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get lpToken(): Bytes {
    let value = this.get("lpToken");
    return value.toBytes();
  }

  set lpToken(value: Bytes) {
    this.set("lpToken", Value.fromBytes(value));
  }

  get allocPoint(): BigInt {
    let value = this.get("allocPoint");
    return value.toBigInt();
  }

  set allocPoint(value: BigInt) {
    this.set("allocPoint", Value.fromBigInt(value));
  }

  get lastRewardBlock(): BigInt {
    let value = this.get("lastRewardBlock");
    return value.toBigInt();
  }

  set lastRewardBlock(value: BigInt) {
    this.set("lastRewardBlock", Value.fromBigInt(value));
  }

  get accSakePerShare(): BigInt {
    let value = this.get("accSakePerShare");
    return value.toBigInt();
  }

  set accSakePerShare(value: BigInt) {
    this.set("accSakePerShare", Value.fromBigInt(value));
  }

  get exchange(): i32 {
    let value = this.get("exchange");
    return value.toI32();
  }

  set exchange(value: i32) {
    this.set("exchange", Value.fromI32(value));
  }

  get addedAt(): i32 {
    let value = this.get("addedAt");
    return value.toI32();
  }

  set addedAt(value: i32) {
    this.set("addedAt", Value.fromI32(value));
  }
}

export class SakeMasterPoolData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SakeMasterPoolData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SakeMasterPoolData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SakeMasterPoolData", id.toString(), this);
  }

  static load(id: string): SakeMasterPoolData | null {
    return store.get("SakeMasterPoolData", id) as SakeMasterPoolData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get allocShare(): BigInt {
    let value = this.get("allocShare");
    return value.toBigInt();
  }

  set allocShare(value: BigInt) {
    this.set("allocShare", Value.fromBigInt(value));
  }

  get exchange(): i32 {
    let value = this.get("exchange");
    return value.toI32();
  }

  set exchange(value: i32) {
    this.set("exchange", Value.fromI32(value));
  }
}

export class uniswapDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save uniswapDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save uniswapDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("uniswapDayData", id.toString(), this);
  }

  static load(id: string): uniswapDayData | null {
    return store.get("uniswapDayData", id) as uniswapDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeInETH(): BigDecimal {
    let value = this.get("dailyVolumeInETH");
    return value.toBigDecimal();
  }

  set dailyVolumeInETH(value: BigDecimal) {
    this.set("dailyVolumeInETH", Value.fromBigDecimal(value));
  }

  get dailyVolumeInUSD(): BigDecimal {
    let value = this.get("dailyVolumeInUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeInUSD(value: BigDecimal) {
    this.set("dailyVolumeInUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeInEth(): BigDecimal {
    let value = this.get("totalVolumeInEth");
    return value.toBigDecimal();
  }

  set totalVolumeInEth(value: BigDecimal) {
    this.set("totalVolumeInEth", Value.fromBigDecimal(value));
  }

  get totalLiquidityInEth(): BigDecimal {
    let value = this.get("totalLiquidityInEth");
    return value.toBigDecimal();
  }

  set totalLiquidityInEth(value: BigDecimal) {
    this.set("totalLiquidityInEth", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    return value.toBigDecimal();
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get totalTokenSells(): BigInt {
    let value = this.get("totalTokenSells");
    return value.toBigInt();
  }

  set totalTokenSells(value: BigInt) {
    this.set("totalTokenSells", Value.fromBigInt(value));
  }

  get totalTokenBuys(): BigInt {
    let value = this.get("totalTokenBuys");
    return value.toBigInt();
  }

  set totalTokenBuys(value: BigInt) {
    this.set("totalTokenBuys", Value.fromBigInt(value));
  }

  get totalAddLiquidity(): BigInt {
    let value = this.get("totalAddLiquidity");
    return value.toBigInt();
  }

  set totalAddLiquidity(value: BigInt) {
    this.set("totalAddLiquidity", Value.fromBigInt(value));
  }

  get totalRemoveLiquidity(): BigInt {
    let value = this.get("totalRemoveLiquidity");
    return value.toBigInt();
  }

  set totalRemoveLiquidity(value: BigInt) {
    this.set("totalRemoveLiquidity", Value.fromBigInt(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}
